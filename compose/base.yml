version: '2.4'

services:

  timescaledb-service:
    image: timescale/timescaledb:latest-pg14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - TIMESCALEDB_TELEMETRY=off
    healthcheck:
      test:
        - CMD
        - pg_isready
        - -U
        - postgres
      interval: 2s
      timeout: 2s
      retries: 50

  timescaledb-metrics:
    image: timescale/timescaledb:latest-pg14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - TIMESCALEDB_TELEMETRY=off
    healthcheck:
      test:
        - CMD
        - pg_isready
        - -U
        - postgres
      interval: 2s
      timeout: 2s
      retries: 50

  localstack:
    image: localstack/localstack:1.4
    environment:
      SERVICES: s3

  pipeline-service:
    image: us.gcr.io/logdna-k8s/pipeline-service:3-latest
    ports:
      - "19095:3000"
    depends_on:
      timescaledb-service:
        condition: service_healthy
      timescaledb-metrics:
        condition: service_healthy
      localstack:
        condition: service_healthy
      account-service:
        condition: service_healthy
    command:
      - /bin/bash
      - -c
      - |
        node migrate.js
        node index.js
    healthcheck:
      test: curl --fail http://localhost:3000/health_check || exit 1
      interval: 1s
      retries: 10
      start_period: 3s
      timeout: 10s
    environment:
      LOGLEVEL: debug
      DATABASE_URL: postgresql://postgres:password@timescaledb-service/postgres
      METRICS_DATABASE_URL: postgresql://postgres:password@timescaledb-metrics/postgres
      AWS_ENDPOINT: http://localstack:4566
      AWS_ACCESS_KEY: abcd
      AWS_SECRET_KEY: abcd
      S3_BUCKET: pipeline-vector-config
      PIPELINE_CONTROL_KEY: mezmo
      LOG_ANALYSIS_HOSTNAME: logs.use.dev.logdna.net
      DEFAULT_PARTITION_ID: test0
      VECTOR_DATA_DIR: /tmp
      VECTOR_DNS_TEMPLATE: localhost
      SAMPLES_S3_BUCKET: pipeline-sample-data
      SAMPLES_AWS_ACCESS_KEY: abcd
      SAMPLES_AWS_SECRET_KEY: abcd
      RESHAPE_MESSAGE_IN_VECTOR: 1
      ACCOUNT_SERVICE_URL: http://account-service:8030

  account-service:
    image: us.gcr.io/logdna-k8s/account-service:1-latest
    environment:
      LOGLEVEL: info
      HTTP_PORT: 8030
      ACCOUNT_BACKEND: 'memory'
      FEATURE_FLAGS_API_KEY: 'abc123'
      ENV_NAME: 'docker'
      VENDOR: 'logdna'
      FEATURE_FLAGS_BACKEND: 'memory'
      IN_MEMORY_FEATURE_FLAGS: 'pipeline_per_account_limit:true,pipeline_node_limit:true'
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - "http://account-service:8030/health_check"
    command: node index.js
